Codebook <- read_excel("data-raw/Codebook.xlsx")
View(Codebook)
HealthIneq <- readRDS(file = "data.rds")
usethis::use_data(HealthIneq, overwrite = TRUE)
setwd("~/Git/HealthIneq/data-raw")
HealthIneq <- readRDS(file = "data.rds")
usethis::use_data(HealthIneq, overwrite = TRUE)
#'   \item{stateabbrv}{State Abbreviation}
#'   \item{puninsured2010}{Percent Uninsured}
#'   \item{reimbpenrolladj10}{Medicare $ Per Enrollee}
#'   \item{reltot}{Percent Religious}
#'   \item{hhinc00}{Mean Household Income}
#'   \item
#'   \item
#'   \item
#'   \item
#' }
"HealthIneq"
#'   \item
#'   \item
#'   \item
#'   \item
#'   \item
#'   \item
#'   \item
#'   \item
#'
#' }
"HealthIneq"
Codebook <- read_excel("data-raw/Codebook.xlsx")
library(mosaic)   # Load additional packages here
library(tidyverse)
library(knitr)
library(kableExtra)
library(readxl)
library(readr)
library(dplyr)
library(janitor)
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
library(mosaic)   # Load additional packages here
library(tidyverse)
library(knitr)
library(kableExtra)
library(readxl)
library(readr)
library(dplyr)
library(janitor)
knitr::opts_chunk$set(
tidy=FALSE,     # display code as typed
size="small")   # slightly smaller font for code
Codebook <- read_excel("data-raw/Codebook.xlsx")
Codebook$Name <- gsub("_", "", Codebook$Name)
Codebook$item <- Codebook %>% paste("{",Name, "}{", Description, "}", sep ="")
Codebook$item <- paste("{",Codebook$Name, "}{", Codebook$Description, "}", sep ="")
Codebook$item
Codebook <- Codebook$item
Codebook <- read_excel("data-raw/Codebook.xlsx")
Codebook$Name <- gsub("_", "", Codebook$Name)
Codebook$Name <- gsub("_", "", Codebook$Name)
Codebook$item <- paste("{",Codebook$Name, "}{", Codebook$Description, "}", sep ="")
Codebook <-Codebook %>% select(item)
View(Codebook)
library(HealthIneq)
library(dplyr)
data(HealthIneq)
# Create average life expectancy across all counties
HealthIneq  %>%
summarize(male_avg = mean(avglifeM),
female_avg = mean(avglifeF))
View(HealthIneq)
data <- readRDS("~/Git/HealthIneq/data-raw/data.rds")
HealthIneq <- readRDS(file = "data.rds")
usethis::use_data(HealthIneq, overwrite = TRUE)
library(HealthIneq)
library(dplyr)
data(HealthIneq)
View(HealthIneq)
data <- readRDS("~/Git/HealthIneq/data-raw/data.rds")
# Load in data
HealthIneq <- readRDS(file = "data.rds")
usethis::use_data(HealthIneq)
usethis::use_data(HealthIneq, overwrite = TRUE)
load("~/Git/HealthIneq/data/HealthIneq.rda")
load("~/Git/HealthIneq/data/HealthIneq.rda")
# Create average life expectancy across all counties
HealthIneq  %>%
summarize(male_avg = mean(avglifeM),
female_avg = mean(avglifeF))
library(HealthIneq)
library(dplyr)
data(HealthIneq)
# Create average life expectancy across all counties
HealthIneq  %>%
summarize(male_avg = mean(avglifeM),
female_avg = mean(avglifeF))
load("~/Git/HealthIneq/data/HealthIneq.rda")
HealthIneq  %>%
summarize(male_avg = mean(avglifeM),
female_avg = mean(avglifeF))
View(HealthIneq)
length(unique(names(HealthIneq)))
HealthIneq <- HealthIneq[, !duplicated(colnames(HealthIneq))]
usethis::use_data(HealthIneq, overwrite = TRUE)
library(HealthIneq)
library(dplyr)
data(HealthIneq)
force(HealthIneq)
# Create average life expectancy across all counties
HealthIneq  %>%
summarize(male_avg = mean(avglifeM),
female_avg = mean(avglifeF))
load("~/Git/HealthIneq/data/HealthIneq.rda")
# Create average life expectancy across all counties
HealthIneq  %>%
summarize(male_avg = mean(avglifeM),
female_avg = mean(avglifeF))
plot(HealthIneq$avg_life_M, HealthIneq$avg_life_F, main = "Male vs. Female Life Expectancies",
xlab = "Male Life Expectancy (Years)", ylab = "Feale Life Expectancy (Years)")
plot(HealthIneq$avglifeM, HealthIneq$avglifeF, main = "Male vs. Female Life Expectancies",
xlab = "Male Life Expectancy (Years)", ylab = "Feale Life Expectancy (Years)")
plot(HealthIneq$avglifeM, HealthIneq$avglifeF, main = "Male vs. Female Life Expectancies",
xlab = "Male Life Expectancy (Years)", ylab = "Feale Life Expectancy (Years)")
library(HealthIneq)
library(dplyr)
# Create average life expectancy across all counties
HealthIneq  %>%
summarize(male_avg = mean(avglifeM),
female_avg = mean(avglifeF))
library(HealthIneq)
library(dplyr)
# Create average life expectancy across all counties
HealthIneq  %>%
summarize(male_avg = mean(avglifeM),
female_avg = mean(avglifeF))
load("~/Git/HealthIneq/data/HealthIneq.rda")
data("HealthIneq")
library(HealthIneq)
data(HealthIneq)
force(HealthIneq)
load("~/Git/HealthIneq/data/HealthIneq.rda")
data <- readRDS("~/Git/HealthIneq/data-raw/data.rds")
# Load in data
HealthIneq <- readRDS(file = "data.rds")
HealthIneq <- readRDS(file = "data.rds")
HealthIneq <- HealthIneq[, !duplicated(colnames(HealthIneq))]
usethis::use_data(HealthIneq)
library(HealthIneq)
library(dplyr)
data("HealthIneq")
force(HealthIneq)
HealthIneq
HealthIneq
?HealthIneq
HealthIneq <- readRDS(file = "data.rds")
HealthIneq <- HealthIneq[, !duplicated(colnames(HealthIneq))]
usethis::use_data(HealthIneq)
usethis::use_data(HealthIneq, overwrite = TRUE)
library(HealthIneq)
library(HealthIneq)
data("HealthIneq")
force(HealthIneq)
View(HealthIneq)
?HealthIneq
source('~/Git/HealthIneq/R/HealthIneq.R')
library(HealthIneq)
?HealthIneq
source('~/Git/HealthIneq/R/HealthIneq.R')
library(HealthIneq)
data(HealthIneq)
library(mosaic)   # Load additional packages here
library(tidyverse)
library(knitr)
library(kableExtra)
library(caret)
library(leaps)
library(dplyr)
library(readxl)
library(purrr)
library(maptools) # required for rgdal to work correctly
library(tigris)
library(acs)
library(stringr) # to pad FIPS codes
library(leaflet)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keepall = TRUE) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe') %>%
dplyr::select(avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4, czname)
HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keepall = TRUE) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe')
HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keepall = T) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe') %>%
dplyr::select(avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4, czname) %>%
gather("Quarter", value = "Value", avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4) %>%
mutate(Quarter = parsenumber(Quarter))
HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname)
distinct
??distinct
# Create data for plot
gini_plot_data <- HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keep_all = TRUE) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe') %>%
dplyr::select(avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4, czname) %>%
gather("Quarter", value = "Value", avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4) %>%
mutate(Quarter = parsenumber(Quarter))
HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keep_all = TRUE) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe') %>%
dplyr::select(avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4, czname)
HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keep_all = TRUE) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe') %>%
dplyr::select(avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4, czname) %>%
gather("Quarter", value = "Value", avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4)
HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keep_all = TRUE) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe') %>%
dplyr::select(avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4, czname) %>%
gather("Quarter", value = "Value", avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4) %>%
mutate(Quarter = parsenumber(Quarter))
??parse_number
libray(readr)
library(readr)
# Create data for plot
gini_plot_data <- HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keep_all = TRUE) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe') %>%
dplyr::select(avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4, czname) %>%
gather("Quarter", value = "Value", avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4) %>%
mutate(Quarter = parsenumber(Quarter))
# Create data for plot
gini_plot_data <- HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keep_all = TRUE) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe') %>%
dplyr::select(avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4, czname) %>%
gather("Quarter", value = "Value", avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4) %>%
mutate(Quarter = parse_number(Quarter))
# Plot for b
ggplot(giniplotdata, aes(x = as.factor(Quarter), y = Value, fill = as.factor(czname)))+
geomcol(position = "dodge")+
thememinimal()+
facetwrap(~as.factor(czname))+
coordcartesian(ylim=c(80,88))+
scalefillbrewer(palette = 16)+
labs(title = "Life Expectancy by Income Quartile",
fill = "County",
y = "Average Life Expectancy",
x = "Income Quartile")+
theme(plot.title = elementtext(hjust = 0.5, size = 13, face = "bold"),
axis.title.x = elementtext(size = 12, face = "bold"),
axis.title.y = elementtext(size = 12, face = "bold"),
axis.text.x = elementtext(size = 10),
axis.text.y = elementtext(size = 10),
legend.position = "bottom")
# Create data for plot
gini_plot_data <- HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keep_all = TRUE) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe') %>%
dplyr::select(avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4, czname) %>%
gather("Quarter", value = "Value", avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4) %>%
mutate(Quarter = parse_number(Quarter))
# Plot for b
ggplot(gini_plot_data, aes(x = as.factor(Quarter), y = Value, fill = as.factor(czname)))+
geomcol(position = "dodge")+
thememinimal()+
facetwrap(~as.factor(czname))+
coordcartesian(ylim=c(80,88))+
scalefillbrewer(palette = 16)+
labs(title = "Life Expectancy by Income Quartile",
fill = "County",
y = "Average Life Expectancy",
x = "Income Quartile")+
theme(plot.title = elementtext(hjust = 0.5, size = 13, face = "bold"),
axis.title.x = elementtext(size = 12, face = "bold"),
axis.title.y = elementtext(size = 12, face = "bold"),
axis.text.x = elementtext(size = 10),
axis.text.y = elementtext(size = 10),
legend.position = "bottom")
# Create data for plot
gini_plot_data <- HealthIneq %>%
arrange(desc(gini99)) %>%
distinct(czname, .keep_all = TRUE) %>% # Remove duplicates for the same county
filter(czname == 'New York City' | czname == 'Santa Fe') %>%
dplyr::select(avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4, czname) %>%
gather("Quarter", value = "Value", avglifeQ1, avglifeQ2, avglifeQ3, avglifeQ4) %>%
mutate(Quarter = parse_number(Quarter))
# Plot for b
ggplot(gini_plot_data, aes(x = as.factor(Quarter), y = Value, fill = as.factor(czname)))+
geom_col(position = "dodge")+
theme_minimal()+
facet_wrap(~as.factor(czname))+
coord_cartesian(ylim=c(80,88))+
scale_fill_brewer(palette = 16)+
labs(title = "Life Expectancy by Income Quartile",
fill = "County",
y = "Average Life Expectancy",
x = "Income Quartile")+
theme(plot.title = element_text(hjust = 0.5, size = 13, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.position = "bottom")
# Only keep numeric variables
healthnumeric <- HealthIneq %>%
purrr::keep(is.numeric) %>% # remove non-numeric variables
dplyr::select(-cz, -fips, -avglifeQ1, -avglifeQ2, # remove confounding average life variables
-avglifeQ3, -avglifeQ4, -avglifeM, -avglifeF)
# Best subsets regression for 5 variables
models <- regsubsets(avglifeall ~ ., data = na.omit(healthnumeric),
nvmax = 5, method = "exhaustive", really.big = TRUE) # set parameters for function
# Which variables are selected (don't print)
#summary(models)
selectedvars <- c('reimbpenrolladj10', 'scapski90pcm',
'hhinc00', 'medianhousevalue', 'lfd20001980')
# Display Variables
selectedvars
# Display Variables
selectedvars %>% kable()
# Display Variables
selectedvars %>% kable(main = "Variables selected")
# Display Variables
selectedvars %>% kable() %>% colnames("Variabel")
# Display Variables
selectedvars %>% kable() %>% colnames("Variable")
# Which variables are selected (don't print)
#summary(models)
selectedvars <- c('reimbpenrolladj10', 'scapski90pcm',
'hhinc00', 'medianhousevalue', 'lfd20001980') %>% as.data.frame()
# Which variables are selected (don't print)
#summary(models)
selectedvars <- c('reimbpenrolladj10', 'scapski90pcm',
'hhinc00', 'medianhousevalue', 'lfd20001980') %>%
as.data.frame() %>%
rename('Variable' = '.')
# Display Variables
selectedvars %>% kable()
# Filter data frame for selected variables
top5 <- HealthIneq[, colnames(HealthIneq) %in% selectedvars
| colnames(HealthIneq) == 'avglifeall']
# Gather for ggplot format
top5 %>% gather(key = "Predictor", value = "Value", -avglifeall) %>%
ggplot(aes(x = log(Value), y = avglifeall, col = Predictor))+
geom_point()+
geom_smooth(method = "lm", se = FALSE, col = "grey20", alpha = 0.7)+
facet_wrap(~Predictor, scales = "free") +
theme_minimal()+
scale_colour_brewer(palette = 16)+
labs(title = "Life Expectancy as predicted by Top 5 Variables",
y = "Average Life Expectancy",
x = "Log(Predictor)")+
theme(plot.title = element_text(hjust = 0.5, size = 13, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.position = "none")
# Filter data frame for selected variables
top5 <- HealthIneq[, colnames(HealthIneq) %in% selectedvars
| colnames(HealthIneq) == 'avglifeall']
# Gather for ggplot format
top5 %>% gather(key = "Predictor", value = "Value", -avglifeall) %>%
ggplot(aes(x = log(Value), y = avglifeall, col = Predictor))+
geom_point()+
geom_smooth(method = "lm", se = FALSE, col = "grey20", alpha = 0.7)+
facet_wrap(~Predictor, scales = "free") +
theme_minimal()+
scale_colour_brewer(palette = 16)+
labs(title = "Life Expectancy as predicted by Top 5 Variables",
y = "Average Life Expectancy",
x = "Log(Predictor)")+
theme(plot.title = element_text(hjust = 0.5, size = 13, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.position = "none")
top5 %>% gather(key = "Predictor", value = "Value", -avglifeall)
top5 %>% gather(key = "Predictor", value = "Value", -avglifeall) %>%
ggplot(aes(x = log(Value), y = avglifeall, col = Predictor))+
geom_point()
# Filter data frame for selected variables
top5 <- HealthIneq[, colnames(HealthIneq) %in% selectedvars
| colnames(HealthIneq) == 'avglifeall']
# Which variables are selected (don't print)
#summary(models)
selectedvars <- c('reimbpenrolladj10', 'scapski90pcm',
'hhinc00', 'medianhousevalue', 'lfd20001980') %>%
as.data.frame() %>% rename('Variable' = '.')
# Which variables are selected (don't print)
#summary(models)
selectedvars <- c('reimbpenrolladj10', 'scapski90pcm',
'hhinc00', 'medianhousevalue', 'lfd20001980')
# Display Variables
selectedvars %>% as.data.frame() %>% rename('Variable' = '.') %>% kable()
# Filter data frame for selected variables
top5 <- HealthIneq[, colnames(HealthIneq) %in% selectedvars
| colnames(HealthIneq) == 'avglifeall']
# Filter data frame for selected variables
top5 <- HealthIneq[, colnames(HealthIneq) %in% selectedvars
| colnames(HealthIneq) == 'avglifeall']
# Gather for ggplot format
top5 %>% gather(key = "Predictor", value = "Value", -avglifeall) %>%
ggplot(aes(x = log(Value), y = avglifeall, col = Predictor))+
geom_point()+
geom_smooth(method = "lm", se = FALSE, col = "grey20", alpha = 0.7)+
facet_wrap(~Predictor, scales = "free") +
theme_minimal()+
scale_colour_brewer(palette = 16)+
labs(title = "Life Expectancy as predicted by Top 5 Variables",
y = "Average Life Expectancy",
x = "Log(Predictor)")+
theme(plot.title = element_text(hjust = 0.5, size = 13, face = "bold"),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold"),
axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.position = "none")
# Group by state, get summary
health_states <- HealthIneq  %>% group_by(stateabbrv) %>%
summarize(meanlife = round(mean(avglifeall), 2),
meanq1 = round(mean(avglifeQ1), 2),
meanq2 = round(mean(avglifeQ2), 2),
meanq3 = round(mean(avglifeQ3), 2),
meanq4 = round(mean(avglifeQ4), 2))
# Pull the state data
states <- states(cb=T)
# Merge state files with characteristics
states_merged_sb <- geo_join(states, health_states, "STUSPS", "stateabbrv")
states_merged <- subset(states_merged_sb, !is.na(meanlife))
# Color Palette
pal <- colorNumeric("Blues", domain = states_merged$meanlife)
# Set up and print Map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 3.5) %>%
addPolygons(data = states_merged,
fillColor = ~pal(states_merged$meanlife),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = paste("Avg Life Expectancy:", states_merged$meanlife, "<br>",
"Q1:", states_merged$meanq1, "<br>",
"Q2:", states_merged$meanq2, "<br>",
"Q3:", states_merged$meanq3, "<br>",
"Q4:", states_merged$meanq4)) %>%
addLegend(pal = pal,
values = states_merged$meanlife,
position = "bottomright",
title = "Average Life Expectancy")
# Set up and print Map
leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%
setView(-98.483330, 38.712046, zoom = 3.5) %>%
addPolygons(data = states_merged,
fillColor = ~pal(states_merged$meanlife),
fillOpacity = 0.7,
weight = 0.2,
smoothFactor = 0.2,
popup = paste("Avg Life Expectancy:", states_merged$meanlife, "<br>",
"Q1:", states_merged$meanq1, "<br>",
"Q2:", states_merged$meanq2, "<br>",
"Q3:", states_merged$meanq3, "<br>",
"Q4:", states_merged$meanq4)) %>%
addLegend(pal = pal,
values = states_merged$meanlife,
position = "bottomright",
title = "Average Life Expectancy")
??states
?tigris::states()
library(acs)
library(MASS)
# Best subsets regression for 5 variables
models <- MASS:regsubsets(avglifeall ~ ., data = na.omit(healthnumeric),
nvmax = 5, method = "exhaustive", really.big = TRUE) # set parameters for function
# Best subsets regression for 5 variables
models <- MASS::regsubsets(avglifeall ~ ., data = na.omit(healthnumeric),
nvmax = 5, method = "exhaustive", really.big = TRUE) # set parameters for function
??regsubsets
library(leaps)
library(dplyr)
# Best subsets regression for 5 variables
models <- leaps::regsubsets(avglifeall ~ ., data = na.omit(healthnumeric),
nvmax = 5, method = "exhaustive", really.big = TRUE) # set parameters for function
update.packages()
yes
library(HealthIneq)
library(HealthIneq)
devtools::check()
library(HealthIneq)
library(HealthIneq)
data(HealthIneq)
library(purrr)
